What happens when you initialize a repository? Why do you need to do it?
Git will create an empty Git repository for you in the directory where you initialize,
we need to do it so Git will use this repository to track changes to files and to use Git featrues.

How is the staging area different from the working directory and the repository? What value do you think it offers?
It is the pipeline between those two, it help us to know which changes to be committed as well as showing untracked files in the working
directory, so without this area Git will never know what changes need to be saved or know if there are untracked files.

How can you use the staging area to make sure you have one commit per logical change?
You use it by adding each change separately to the staging area then commit them in order to have one commit per logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Lets say you want to add a new feature to your application and you don't want it to break the whole application, then you need to
create a branch to test there as much as you like without damaging the original code and when printing the whole commit history
you can see that these commits you made for a new feature are related to a branch you created other than the main branch. So in the future,
if you want to add your newly created feature to the main branch, you can use Git merge to combine your branch with it.

How do the diagrams help you visualize the branch structure?
by using the diagrams you know the path of each branch leading to the main branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
one branch containing new features from both branches, because it makes since we combining the two branches to become one so
that the history of commits for both will show in the log.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
The good thing is that Git will let you know that there is a conflict in merging before it commits
so you will know where to resolve it exactly. If Git do it automatically for you, maybe it will choose the bad performance code instead
of the good one so having the power to solve conflicts manually is much better.
